// ---------- generator & datasource ----------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// ---------- Enums ----------
enum SeasonStatus {
  ACTIVE
  FINISHED
}

enum CombatResult {
  WIN
  LOSE
}

enum PaymentKind {
  BASE_PURCHASE
  STORE_PACK
  STORE_BOOST
  PAYOUT
}

enum PaymentStatus {
  PENDING
  CONFIRMED
  FAILED
}

// ---------- Models ----------
model User {
  id                String        @id @default(uuid())
  walletAddress     String?       @unique
  worldUsername     String?
  worldIdNullifier  String?       @unique
  locale            String?
  createdAt         DateTime      @default(now())

  // relaciones
  states            EconomyState[]
  payments          Payment[]
  combatsAsAttacker CombatLog[]   @relation("attacker")
  combatsAsDefender CombatLog[]   @relation("defender")

  revengeSlots      RevengeSlot[]                     // slots de venganza para este usuario
  revengeAsTarget   RevengeSlot[] @relation("RevengeTarget") // donde este user es objetivo
}

model Season {
  id           String          @id @default(uuid())
  ordinal      Int
  startsAt     DateTime
  endsAt       DateTime
  status       SeasonStatus    @default(ACTIVE)
  createdAt    DateTime        @default(now())

  states       EconomyState[]
  combats      CombatLog[]
  payments     Payment[]
  revengeSlots RevengeSlot[]
}

model EconomyState {
  id              String    @id @default(uuid())
  userId          String
  seasonId        String

  obrixTotal      Int       @default(0)
  basePurchased   Boolean   @default(false)
  baseStartedAt   DateTime?
  lastCollectedAt DateTime?
  cooldownUntil   DateTime?
  shieldUntil     DateTime?
  attackStep      Int       @default(0)

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user    User   @relation(fields: [userId], references: [id])
  season  Season @relation(fields: [seasonId], references: [id])

  @@unique([userId, seasonId], name: "userId_seasonId")
  @@index([seasonId])
}

model CombatLog {
  id          String        @id @default(uuid())
  seasonId    String
  attackerId  String
  defenderId  String

  result      CombatResult
  cost        Int
  loot        Int           @default(0)
  createdAt   DateTime      @default(now())

  season      Season @relation(fields: [seasonId], references: [id])
  attacker    User   @relation("attacker", fields: [attackerId], references: [id])
  defender    User   @relation("defender", fields: [defenderId], references: [id])

  @@index([attackerId])
  @@index([defenderId])
  @@index([seasonId])
}

model Payment {
  id          String        @id @default(uuid())
  userId      String
  seasonId    String

  kind        PaymentKind
  amountWld   Decimal       @db.Decimal(18, 6)
  txHash      String?       @unique
  status      PaymentStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  confirmedAt DateTime?

  user        User   @relation(fields: [userId], references: [id])
  season      Season @relation(fields: [seasonId], references: [id])

  @@index([userId])
  @@index([seasonId])
}

model AdminSetting {
  key   String @id
  value String
}

model Nonce {
  nonce     String   @id
  purpose   String
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model RevengeSlot {
  id           String   @id @default(uuid())
  userId       String
  seasonId     String
  targetUserId String
  createdAt    DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  season Season @relation(fields: [seasonId], references: [id])
  target User   @relation("RevengeTarget", fields: [targetUserId], references: [id])

  @@unique([userId, seasonId, targetUserId])
  @@index([seasonId])
  @@index([targetUserId])
}
